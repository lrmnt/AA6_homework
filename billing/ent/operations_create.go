// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lrmnt/AA6_homework/billing/ent/billingcycle"
	"github.com/lrmnt/AA6_homework/billing/ent/operations"
	"github.com/lrmnt/AA6_homework/billing/ent/task"
	"github.com/lrmnt/AA6_homework/billing/ent/user"
)

// OperationsCreate is the builder for creating a Operations entity.
type OperationsCreate struct {
	config
	mutation *OperationsMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (oc *OperationsCreate) SetUUID(u uuid.UUID) *OperationsCreate {
	oc.mutation.SetUUID(u)
	return oc
}

// SetAmount sets the "amount" field.
func (oc *OperationsCreate) SetAmount(i int64) *OperationsCreate {
	oc.mutation.SetAmount(i)
	return oc
}

// SetType sets the "type" field.
func (oc *OperationsCreate) SetType(o operations.Type) *OperationsCreate {
	oc.mutation.SetType(o)
	return oc
}

// SetTimestamp sets the "timestamp" field.
func (oc *OperationsCreate) SetTimestamp(t time.Time) *OperationsCreate {
	oc.mutation.SetTimestamp(t)
	return oc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (oc *OperationsCreate) SetUserID(id int) *OperationsCreate {
	oc.mutation.SetUserID(id)
	return oc
}

// SetUser sets the "user" edge to the User entity.
func (oc *OperationsCreate) SetUser(u *User) *OperationsCreate {
	return oc.SetUserID(u.ID)
}

// SetBillingCycleID sets the "billing_cycle" edge to the BillingCycle entity by ID.
func (oc *OperationsCreate) SetBillingCycleID(id int) *OperationsCreate {
	oc.mutation.SetBillingCycleID(id)
	return oc
}

// SetBillingCycle sets the "billing_cycle" edge to the BillingCycle entity.
func (oc *OperationsCreate) SetBillingCycle(b *BillingCycle) *OperationsCreate {
	return oc.SetBillingCycleID(b.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (oc *OperationsCreate) SetTaskID(id int) *OperationsCreate {
	oc.mutation.SetTaskID(id)
	return oc
}

// SetTask sets the "task" edge to the Task entity.
func (oc *OperationsCreate) SetTask(t *Task) *OperationsCreate {
	return oc.SetTaskID(t.ID)
}

// Mutation returns the OperationsMutation object of the builder.
func (oc *OperationsCreate) Mutation() *OperationsMutation {
	return oc.mutation
}

// Save creates the Operations in the database.
func (oc *OperationsCreate) Save(ctx context.Context) (*Operations, error) {
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OperationsCreate) SaveX(ctx context.Context) *Operations {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OperationsCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OperationsCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OperationsCreate) check() error {
	if _, ok := oc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Operations.uuid"`)}
	}
	if _, ok := oc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Operations.amount"`)}
	}
	if _, ok := oc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Operations.type"`)}
	}
	if v, ok := oc.mutation.GetType(); ok {
		if err := operations.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Operations.type": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Operations.timestamp"`)}
	}
	if _, ok := oc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Operations.user"`)}
	}
	if _, ok := oc.mutation.BillingCycleID(); !ok {
		return &ValidationError{Name: "billing_cycle", err: errors.New(`ent: missing required edge "Operations.billing_cycle"`)}
	}
	if _, ok := oc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "Operations.task"`)}
	}
	return nil
}

func (oc *OperationsCreate) sqlSave(ctx context.Context) (*Operations, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OperationsCreate) createSpec() (*Operations, *sqlgraph.CreateSpec) {
	var (
		_node = &Operations{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(operations.Table, sqlgraph.NewFieldSpec(operations.FieldID, field.TypeInt))
	)
	if value, ok := oc.mutation.UUID(); ok {
		_spec.SetField(operations.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := oc.mutation.Amount(); ok {
		_spec.SetField(operations.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := oc.mutation.GetType(); ok {
		_spec.SetField(operations.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := oc.mutation.Timestamp(); ok {
		_spec.SetField(operations.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if nodes := oc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.UserTable,
			Columns: []string{operations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operations_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.BillingCycleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.BillingCycleTable,
			Columns: []string{operations.BillingCycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operations_billing_cycle = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.TaskTable,
			Columns: []string{operations.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operations_task = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OperationsCreateBulk is the builder for creating many Operations entities in bulk.
type OperationsCreateBulk struct {
	config
	err      error
	builders []*OperationsCreate
}

// Save creates the Operations entities in the database.
func (ocb *OperationsCreateBulk) Save(ctx context.Context) ([]*Operations, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Operations, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OperationsCreateBulk) SaveX(ctx context.Context) []*Operations {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OperationsCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OperationsCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
