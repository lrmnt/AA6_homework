// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lrmnt/AA6_homework/billing/ent/billingcycle"
	"github.com/lrmnt/AA6_homework/billing/ent/operations"
	"github.com/lrmnt/AA6_homework/billing/ent/predicate"
	"github.com/lrmnt/AA6_homework/billing/ent/task"
	"github.com/lrmnt/AA6_homework/billing/ent/user"
)

// OperationsUpdate is the builder for updating Operations entities.
type OperationsUpdate struct {
	config
	hooks    []Hook
	mutation *OperationsMutation
}

// Where appends a list predicates to the OperationsUpdate builder.
func (ou *OperationsUpdate) Where(ps ...predicate.Operations) *OperationsUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUUID sets the "uuid" field.
func (ou *OperationsUpdate) SetUUID(u uuid.UUID) *OperationsUpdate {
	ou.mutation.SetUUID(u)
	return ou
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (ou *OperationsUpdate) SetNillableUUID(u *uuid.UUID) *OperationsUpdate {
	if u != nil {
		ou.SetUUID(*u)
	}
	return ou
}

// SetAmount sets the "amount" field.
func (ou *OperationsUpdate) SetAmount(i int64) *OperationsUpdate {
	ou.mutation.ResetAmount()
	ou.mutation.SetAmount(i)
	return ou
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ou *OperationsUpdate) SetNillableAmount(i *int64) *OperationsUpdate {
	if i != nil {
		ou.SetAmount(*i)
	}
	return ou
}

// AddAmount adds i to the "amount" field.
func (ou *OperationsUpdate) AddAmount(i int64) *OperationsUpdate {
	ou.mutation.AddAmount(i)
	return ou
}

// SetType sets the "type" field.
func (ou *OperationsUpdate) SetType(o operations.Type) *OperationsUpdate {
	ou.mutation.SetType(o)
	return ou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ou *OperationsUpdate) SetNillableType(o *operations.Type) *OperationsUpdate {
	if o != nil {
		ou.SetType(*o)
	}
	return ou
}

// SetTimestamp sets the "timestamp" field.
func (ou *OperationsUpdate) SetTimestamp(t time.Time) *OperationsUpdate {
	ou.mutation.SetTimestamp(t)
	return ou
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ou *OperationsUpdate) SetNillableTimestamp(t *time.Time) *OperationsUpdate {
	if t != nil {
		ou.SetTimestamp(*t)
	}
	return ou
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ou *OperationsUpdate) SetUserID(id int) *OperationsUpdate {
	ou.mutation.SetUserID(id)
	return ou
}

// SetUser sets the "user" edge to the User entity.
func (ou *OperationsUpdate) SetUser(u *User) *OperationsUpdate {
	return ou.SetUserID(u.ID)
}

// SetBillingCycleID sets the "billing_cycle" edge to the BillingCycle entity by ID.
func (ou *OperationsUpdate) SetBillingCycleID(id int) *OperationsUpdate {
	ou.mutation.SetBillingCycleID(id)
	return ou
}

// SetBillingCycle sets the "billing_cycle" edge to the BillingCycle entity.
func (ou *OperationsUpdate) SetBillingCycle(b *BillingCycle) *OperationsUpdate {
	return ou.SetBillingCycleID(b.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (ou *OperationsUpdate) SetTaskID(id int) *OperationsUpdate {
	ou.mutation.SetTaskID(id)
	return ou
}

// SetTask sets the "task" edge to the Task entity.
func (ou *OperationsUpdate) SetTask(t *Task) *OperationsUpdate {
	return ou.SetTaskID(t.ID)
}

// Mutation returns the OperationsMutation object of the builder.
func (ou *OperationsUpdate) Mutation() *OperationsMutation {
	return ou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ou *OperationsUpdate) ClearUser() *OperationsUpdate {
	ou.mutation.ClearUser()
	return ou
}

// ClearBillingCycle clears the "billing_cycle" edge to the BillingCycle entity.
func (ou *OperationsUpdate) ClearBillingCycle() *OperationsUpdate {
	ou.mutation.ClearBillingCycle()
	return ou
}

// ClearTask clears the "task" edge to the Task entity.
func (ou *OperationsUpdate) ClearTask() *OperationsUpdate {
	ou.mutation.ClearTask()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperationsUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperationsUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperationsUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OperationsUpdate) check() error {
	if v, ok := ou.mutation.GetType(); ok {
		if err := operations.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Operations.type": %w`, err)}
		}
	}
	if _, ok := ou.mutation.UserID(); ou.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Operations.user"`)
	}
	if _, ok := ou.mutation.BillingCycleID(); ou.mutation.BillingCycleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Operations.billing_cycle"`)
	}
	if _, ok := ou.mutation.TaskID(); ou.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Operations.task"`)
	}
	return nil
}

func (ou *OperationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(operations.Table, operations.Columns, sqlgraph.NewFieldSpec(operations.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UUID(); ok {
		_spec.SetField(operations.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := ou.mutation.Amount(); ok {
		_spec.SetField(operations.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedAmount(); ok {
		_spec.AddField(operations.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(operations.FieldType, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.Timestamp(); ok {
		_spec.SetField(operations.FieldTimestamp, field.TypeTime, value)
	}
	if ou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.UserTable,
			Columns: []string{operations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.UserTable,
			Columns: []string{operations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.BillingCycleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.BillingCycleTable,
			Columns: []string{operations.BillingCycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BillingCycleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.BillingCycleTable,
			Columns: []string{operations.BillingCycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.TaskTable,
			Columns: []string{operations.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.TaskTable,
			Columns: []string{operations.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperationsUpdateOne is the builder for updating a single Operations entity.
type OperationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperationsMutation
}

// SetUUID sets the "uuid" field.
func (ouo *OperationsUpdateOne) SetUUID(u uuid.UUID) *OperationsUpdateOne {
	ouo.mutation.SetUUID(u)
	return ouo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (ouo *OperationsUpdateOne) SetNillableUUID(u *uuid.UUID) *OperationsUpdateOne {
	if u != nil {
		ouo.SetUUID(*u)
	}
	return ouo
}

// SetAmount sets the "amount" field.
func (ouo *OperationsUpdateOne) SetAmount(i int64) *OperationsUpdateOne {
	ouo.mutation.ResetAmount()
	ouo.mutation.SetAmount(i)
	return ouo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ouo *OperationsUpdateOne) SetNillableAmount(i *int64) *OperationsUpdateOne {
	if i != nil {
		ouo.SetAmount(*i)
	}
	return ouo
}

// AddAmount adds i to the "amount" field.
func (ouo *OperationsUpdateOne) AddAmount(i int64) *OperationsUpdateOne {
	ouo.mutation.AddAmount(i)
	return ouo
}

// SetType sets the "type" field.
func (ouo *OperationsUpdateOne) SetType(o operations.Type) *OperationsUpdateOne {
	ouo.mutation.SetType(o)
	return ouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ouo *OperationsUpdateOne) SetNillableType(o *operations.Type) *OperationsUpdateOne {
	if o != nil {
		ouo.SetType(*o)
	}
	return ouo
}

// SetTimestamp sets the "timestamp" field.
func (ouo *OperationsUpdateOne) SetTimestamp(t time.Time) *OperationsUpdateOne {
	ouo.mutation.SetTimestamp(t)
	return ouo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ouo *OperationsUpdateOne) SetNillableTimestamp(t *time.Time) *OperationsUpdateOne {
	if t != nil {
		ouo.SetTimestamp(*t)
	}
	return ouo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ouo *OperationsUpdateOne) SetUserID(id int) *OperationsUpdateOne {
	ouo.mutation.SetUserID(id)
	return ouo
}

// SetUser sets the "user" edge to the User entity.
func (ouo *OperationsUpdateOne) SetUser(u *User) *OperationsUpdateOne {
	return ouo.SetUserID(u.ID)
}

// SetBillingCycleID sets the "billing_cycle" edge to the BillingCycle entity by ID.
func (ouo *OperationsUpdateOne) SetBillingCycleID(id int) *OperationsUpdateOne {
	ouo.mutation.SetBillingCycleID(id)
	return ouo
}

// SetBillingCycle sets the "billing_cycle" edge to the BillingCycle entity.
func (ouo *OperationsUpdateOne) SetBillingCycle(b *BillingCycle) *OperationsUpdateOne {
	return ouo.SetBillingCycleID(b.ID)
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (ouo *OperationsUpdateOne) SetTaskID(id int) *OperationsUpdateOne {
	ouo.mutation.SetTaskID(id)
	return ouo
}

// SetTask sets the "task" edge to the Task entity.
func (ouo *OperationsUpdateOne) SetTask(t *Task) *OperationsUpdateOne {
	return ouo.SetTaskID(t.ID)
}

// Mutation returns the OperationsMutation object of the builder.
func (ouo *OperationsUpdateOne) Mutation() *OperationsMutation {
	return ouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ouo *OperationsUpdateOne) ClearUser() *OperationsUpdateOne {
	ouo.mutation.ClearUser()
	return ouo
}

// ClearBillingCycle clears the "billing_cycle" edge to the BillingCycle entity.
func (ouo *OperationsUpdateOne) ClearBillingCycle() *OperationsUpdateOne {
	ouo.mutation.ClearBillingCycle()
	return ouo
}

// ClearTask clears the "task" edge to the Task entity.
func (ouo *OperationsUpdateOne) ClearTask() *OperationsUpdateOne {
	ouo.mutation.ClearTask()
	return ouo
}

// Where appends a list predicates to the OperationsUpdate builder.
func (ouo *OperationsUpdateOne) Where(ps ...predicate.Operations) *OperationsUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperationsUpdateOne) Select(field string, fields ...string) *OperationsUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operations entity.
func (ouo *OperationsUpdateOne) Save(ctx context.Context) (*Operations, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperationsUpdateOne) SaveX(ctx context.Context) *Operations {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperationsUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperationsUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OperationsUpdateOne) check() error {
	if v, ok := ouo.mutation.GetType(); ok {
		if err := operations.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Operations.type": %w`, err)}
		}
	}
	if _, ok := ouo.mutation.UserID(); ouo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Operations.user"`)
	}
	if _, ok := ouo.mutation.BillingCycleID(); ouo.mutation.BillingCycleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Operations.billing_cycle"`)
	}
	if _, ok := ouo.mutation.TaskID(); ouo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Operations.task"`)
	}
	return nil
}

func (ouo *OperationsUpdateOne) sqlSave(ctx context.Context) (_node *Operations, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(operations.Table, operations.Columns, sqlgraph.NewFieldSpec(operations.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operations.FieldID)
		for _, f := range fields {
			if !operations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UUID(); ok {
		_spec.SetField(operations.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := ouo.mutation.Amount(); ok {
		_spec.SetField(operations.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedAmount(); ok {
		_spec.AddField(operations.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(operations.FieldType, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.Timestamp(); ok {
		_spec.SetField(operations.FieldTimestamp, field.TypeTime, value)
	}
	if ouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.UserTable,
			Columns: []string{operations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.UserTable,
			Columns: []string{operations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.BillingCycleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.BillingCycleTable,
			Columns: []string{operations.BillingCycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BillingCycleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.BillingCycleTable,
			Columns: []string{operations.BillingCycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.TaskTable,
			Columns: []string{operations.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   operations.TaskTable,
			Columns: []string{operations.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Operations{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
