// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lrmnt/AA6_homework/billing/ent/billingcycle"
	"github.com/lrmnt/AA6_homework/billing/ent/predicate"
)

// BillingCycleUpdate is the builder for updating BillingCycle entities.
type BillingCycleUpdate struct {
	config
	hooks    []Hook
	mutation *BillingCycleMutation
}

// Where appends a list predicates to the BillingCycleUpdate builder.
func (bcu *BillingCycleUpdate) Where(ps ...predicate.BillingCycle) *BillingCycleUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetUUID sets the "uuid" field.
func (bcu *BillingCycleUpdate) SetUUID(u uuid.UUID) *BillingCycleUpdate {
	bcu.mutation.SetUUID(u)
	return bcu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (bcu *BillingCycleUpdate) SetNillableUUID(u *uuid.UUID) *BillingCycleUpdate {
	if u != nil {
		bcu.SetUUID(*u)
	}
	return bcu
}

// SetTsFrom sets the "ts_from" field.
func (bcu *BillingCycleUpdate) SetTsFrom(i int64) *BillingCycleUpdate {
	bcu.mutation.ResetTsFrom()
	bcu.mutation.SetTsFrom(i)
	return bcu
}

// SetNillableTsFrom sets the "ts_from" field if the given value is not nil.
func (bcu *BillingCycleUpdate) SetNillableTsFrom(i *int64) *BillingCycleUpdate {
	if i != nil {
		bcu.SetTsFrom(*i)
	}
	return bcu
}

// AddTsFrom adds i to the "ts_from" field.
func (bcu *BillingCycleUpdate) AddTsFrom(i int64) *BillingCycleUpdate {
	bcu.mutation.AddTsFrom(i)
	return bcu
}

// SetTsTo sets the "ts_to" field.
func (bcu *BillingCycleUpdate) SetTsTo(i int64) *BillingCycleUpdate {
	bcu.mutation.ResetTsTo()
	bcu.mutation.SetTsTo(i)
	return bcu
}

// SetNillableTsTo sets the "ts_to" field if the given value is not nil.
func (bcu *BillingCycleUpdate) SetNillableTsTo(i *int64) *BillingCycleUpdate {
	if i != nil {
		bcu.SetTsTo(*i)
	}
	return bcu
}

// AddTsTo adds i to the "ts_to" field.
func (bcu *BillingCycleUpdate) AddTsTo(i int64) *BillingCycleUpdate {
	bcu.mutation.AddTsTo(i)
	return bcu
}

// SetState sets the "state" field.
func (bcu *BillingCycleUpdate) SetState(b billingcycle.State) *BillingCycleUpdate {
	bcu.mutation.SetState(b)
	return bcu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (bcu *BillingCycleUpdate) SetNillableState(b *billingcycle.State) *BillingCycleUpdate {
	if b != nil {
		bcu.SetState(*b)
	}
	return bcu
}

// Mutation returns the BillingCycleMutation object of the builder.
func (bcu *BillingCycleUpdate) Mutation() *BillingCycleMutation {
	return bcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BillingCycleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BillingCycleUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BillingCycleUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BillingCycleUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BillingCycleUpdate) check() error {
	if v, ok := bcu.mutation.State(); ok {
		if err := billingcycle.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "BillingCycle.state": %w`, err)}
		}
	}
	return nil
}

func (bcu *BillingCycleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcycle.Table, billingcycle.Columns, sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.UUID(); ok {
		_spec.SetField(billingcycle.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := bcu.mutation.TsFrom(); ok {
		_spec.SetField(billingcycle.FieldTsFrom, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.AddedTsFrom(); ok {
		_spec.AddField(billingcycle.FieldTsFrom, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.TsTo(); ok {
		_spec.SetField(billingcycle.FieldTsTo, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.AddedTsTo(); ok {
		_spec.AddField(billingcycle.FieldTsTo, field.TypeInt64, value)
	}
	if value, ok := bcu.mutation.State(); ok {
		_spec.SetField(billingcycle.FieldState, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcycle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BillingCycleUpdateOne is the builder for updating a single BillingCycle entity.
type BillingCycleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingCycleMutation
}

// SetUUID sets the "uuid" field.
func (bcuo *BillingCycleUpdateOne) SetUUID(u uuid.UUID) *BillingCycleUpdateOne {
	bcuo.mutation.SetUUID(u)
	return bcuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (bcuo *BillingCycleUpdateOne) SetNillableUUID(u *uuid.UUID) *BillingCycleUpdateOne {
	if u != nil {
		bcuo.SetUUID(*u)
	}
	return bcuo
}

// SetTsFrom sets the "ts_from" field.
func (bcuo *BillingCycleUpdateOne) SetTsFrom(i int64) *BillingCycleUpdateOne {
	bcuo.mutation.ResetTsFrom()
	bcuo.mutation.SetTsFrom(i)
	return bcuo
}

// SetNillableTsFrom sets the "ts_from" field if the given value is not nil.
func (bcuo *BillingCycleUpdateOne) SetNillableTsFrom(i *int64) *BillingCycleUpdateOne {
	if i != nil {
		bcuo.SetTsFrom(*i)
	}
	return bcuo
}

// AddTsFrom adds i to the "ts_from" field.
func (bcuo *BillingCycleUpdateOne) AddTsFrom(i int64) *BillingCycleUpdateOne {
	bcuo.mutation.AddTsFrom(i)
	return bcuo
}

// SetTsTo sets the "ts_to" field.
func (bcuo *BillingCycleUpdateOne) SetTsTo(i int64) *BillingCycleUpdateOne {
	bcuo.mutation.ResetTsTo()
	bcuo.mutation.SetTsTo(i)
	return bcuo
}

// SetNillableTsTo sets the "ts_to" field if the given value is not nil.
func (bcuo *BillingCycleUpdateOne) SetNillableTsTo(i *int64) *BillingCycleUpdateOne {
	if i != nil {
		bcuo.SetTsTo(*i)
	}
	return bcuo
}

// AddTsTo adds i to the "ts_to" field.
func (bcuo *BillingCycleUpdateOne) AddTsTo(i int64) *BillingCycleUpdateOne {
	bcuo.mutation.AddTsTo(i)
	return bcuo
}

// SetState sets the "state" field.
func (bcuo *BillingCycleUpdateOne) SetState(b billingcycle.State) *BillingCycleUpdateOne {
	bcuo.mutation.SetState(b)
	return bcuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (bcuo *BillingCycleUpdateOne) SetNillableState(b *billingcycle.State) *BillingCycleUpdateOne {
	if b != nil {
		bcuo.SetState(*b)
	}
	return bcuo
}

// Mutation returns the BillingCycleMutation object of the builder.
func (bcuo *BillingCycleUpdateOne) Mutation() *BillingCycleMutation {
	return bcuo.mutation
}

// Where appends a list predicates to the BillingCycleUpdate builder.
func (bcuo *BillingCycleUpdateOne) Where(ps ...predicate.BillingCycle) *BillingCycleUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BillingCycleUpdateOne) Select(field string, fields ...string) *BillingCycleUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BillingCycle entity.
func (bcuo *BillingCycleUpdateOne) Save(ctx context.Context) (*BillingCycle, error) {
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BillingCycleUpdateOne) SaveX(ctx context.Context) *BillingCycle {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BillingCycleUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BillingCycleUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BillingCycleUpdateOne) check() error {
	if v, ok := bcuo.mutation.State(); ok {
		if err := billingcycle.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "BillingCycle.state": %w`, err)}
		}
	}
	return nil
}

func (bcuo *BillingCycleUpdateOne) sqlSave(ctx context.Context) (_node *BillingCycle, err error) {
	if err := bcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingcycle.Table, billingcycle.Columns, sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BillingCycle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingcycle.FieldID)
		for _, f := range fields {
			if !billingcycle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billingcycle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.UUID(); ok {
		_spec.SetField(billingcycle.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := bcuo.mutation.TsFrom(); ok {
		_spec.SetField(billingcycle.FieldTsFrom, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.AddedTsFrom(); ok {
		_spec.AddField(billingcycle.FieldTsFrom, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.TsTo(); ok {
		_spec.SetField(billingcycle.FieldTsTo, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.AddedTsTo(); ok {
		_spec.AddField(billingcycle.FieldTsTo, field.TypeInt64, value)
	}
	if value, ok := bcuo.mutation.State(); ok {
		_spec.SetField(billingcycle.FieldState, field.TypeEnum, value)
	}
	_node = &BillingCycle{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingcycle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
