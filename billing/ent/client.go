// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/lrmnt/AA6_homework/billing/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lrmnt/AA6_homework/billing/ent/billing"
	"github.com/lrmnt/AA6_homework/billing/ent/billingcycle"
	"github.com/lrmnt/AA6_homework/billing/ent/operations"
	"github.com/lrmnt/AA6_homework/billing/ent/task"
	"github.com/lrmnt/AA6_homework/billing/ent/tasklog"
	"github.com/lrmnt/AA6_homework/billing/ent/user"
	"github.com/lrmnt/AA6_homework/billing/ent/userlog"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Billing is the client for interacting with the Billing builders.
	Billing *BillingClient
	// BillingCycle is the client for interacting with the BillingCycle builders.
	BillingCycle *BillingCycleClient
	// Operations is the client for interacting with the Operations builders.
	Operations *OperationsClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// TaskLog is the client for interacting with the TaskLog builders.
	TaskLog *TaskLogClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserLog is the client for interacting with the UserLog builders.
	UserLog *UserLogClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Billing = NewBillingClient(c.config)
	c.BillingCycle = NewBillingCycleClient(c.config)
	c.Operations = NewOperationsClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.TaskLog = NewTaskLogClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserLog = NewUserLogClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Billing:      NewBillingClient(cfg),
		BillingCycle: NewBillingCycleClient(cfg),
		Operations:   NewOperationsClient(cfg),
		Task:         NewTaskClient(cfg),
		TaskLog:      NewTaskLogClient(cfg),
		User:         NewUserClient(cfg),
		UserLog:      NewUserLogClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Billing:      NewBillingClient(cfg),
		BillingCycle: NewBillingCycleClient(cfg),
		Operations:   NewOperationsClient(cfg),
		Task:         NewTaskClient(cfg),
		TaskLog:      NewTaskLogClient(cfg),
		User:         NewUserClient(cfg),
		UserLog:      NewUserLogClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Billing.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Billing, c.BillingCycle, c.Operations, c.Task, c.TaskLog, c.User, c.UserLog,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Billing, c.BillingCycle, c.Operations, c.Task, c.TaskLog, c.User, c.UserLog,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BillingMutation:
		return c.Billing.mutate(ctx, m)
	case *BillingCycleMutation:
		return c.BillingCycle.mutate(ctx, m)
	case *OperationsMutation:
		return c.Operations.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *TaskLogMutation:
		return c.TaskLog.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserLogMutation:
		return c.UserLog.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BillingClient is a client for the Billing schema.
type BillingClient struct {
	config
}

// NewBillingClient returns a client for the Billing from the given config.
func NewBillingClient(c config) *BillingClient {
	return &BillingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billing.Hooks(f(g(h())))`.
func (c *BillingClient) Use(hooks ...Hook) {
	c.hooks.Billing = append(c.hooks.Billing, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billing.Intercept(f(g(h())))`.
func (c *BillingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Billing = append(c.inters.Billing, interceptors...)
}

// Create returns a builder for creating a Billing entity.
func (c *BillingClient) Create() *BillingCreate {
	mutation := newBillingMutation(c.config, OpCreate)
	return &BillingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Billing entities.
func (c *BillingClient) CreateBulk(builders ...*BillingCreate) *BillingCreateBulk {
	return &BillingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingClient) MapCreateBulk(slice any, setFunc func(*BillingCreate, int)) *BillingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingCreateBulk{err: fmt.Errorf("calling to BillingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Billing.
func (c *BillingClient) Update() *BillingUpdate {
	mutation := newBillingMutation(c.config, OpUpdate)
	return &BillingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingClient) UpdateOne(b *Billing) *BillingUpdateOne {
	mutation := newBillingMutation(c.config, OpUpdateOne, withBilling(b))
	return &BillingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingClient) UpdateOneID(id int) *BillingUpdateOne {
	mutation := newBillingMutation(c.config, OpUpdateOne, withBillingID(id))
	return &BillingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Billing.
func (c *BillingClient) Delete() *BillingDelete {
	mutation := newBillingMutation(c.config, OpDelete)
	return &BillingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingClient) DeleteOne(b *Billing) *BillingDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingClient) DeleteOneID(id int) *BillingDeleteOne {
	builder := c.Delete().Where(billing.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingDeleteOne{builder}
}

// Query returns a query builder for Billing.
func (c *BillingClient) Query() *BillingQuery {
	return &BillingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBilling},
		inters: c.Interceptors(),
	}
}

// Get returns a Billing entity by its id.
func (c *BillingClient) Get(ctx context.Context, id int) (*Billing, error) {
	return c.Query().Where(billing.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingClient) GetX(ctx context.Context, id int) *Billing {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Billing.
func (c *BillingClient) QueryUser(b *Billing) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billing.Table, billing.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, billing.UserTable, billing.UserColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingCycle queries the billing_cycle edge of a Billing.
func (c *BillingClient) QueryBillingCycle(b *Billing) *BillingCycleQuery {
	query := (&BillingCycleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billing.Table, billing.FieldID, id),
			sqlgraph.To(billingcycle.Table, billingcycle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, billing.BillingCycleTable, billing.BillingCycleColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillingClient) Hooks() []Hook {
	return c.hooks.Billing
}

// Interceptors returns the client interceptors.
func (c *BillingClient) Interceptors() []Interceptor {
	return c.inters.Billing
}

func (c *BillingClient) mutate(ctx context.Context, m *BillingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Billing mutation op: %q", m.Op())
	}
}

// BillingCycleClient is a client for the BillingCycle schema.
type BillingCycleClient struct {
	config
}

// NewBillingCycleClient returns a client for the BillingCycle from the given config.
func NewBillingCycleClient(c config) *BillingCycleClient {
	return &BillingCycleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billingcycle.Hooks(f(g(h())))`.
func (c *BillingCycleClient) Use(hooks ...Hook) {
	c.hooks.BillingCycle = append(c.hooks.BillingCycle, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `billingcycle.Intercept(f(g(h())))`.
func (c *BillingCycleClient) Intercept(interceptors ...Interceptor) {
	c.inters.BillingCycle = append(c.inters.BillingCycle, interceptors...)
}

// Create returns a builder for creating a BillingCycle entity.
func (c *BillingCycleClient) Create() *BillingCycleCreate {
	mutation := newBillingCycleMutation(c.config, OpCreate)
	return &BillingCycleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BillingCycle entities.
func (c *BillingCycleClient) CreateBulk(builders ...*BillingCycleCreate) *BillingCycleCreateBulk {
	return &BillingCycleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BillingCycleClient) MapCreateBulk(slice any, setFunc func(*BillingCycleCreate, int)) *BillingCycleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BillingCycleCreateBulk{err: fmt.Errorf("calling to BillingCycleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BillingCycleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BillingCycleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BillingCycle.
func (c *BillingCycleClient) Update() *BillingCycleUpdate {
	mutation := newBillingCycleMutation(c.config, OpUpdate)
	return &BillingCycleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillingCycleClient) UpdateOne(bc *BillingCycle) *BillingCycleUpdateOne {
	mutation := newBillingCycleMutation(c.config, OpUpdateOne, withBillingCycle(bc))
	return &BillingCycleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillingCycleClient) UpdateOneID(id int) *BillingCycleUpdateOne {
	mutation := newBillingCycleMutation(c.config, OpUpdateOne, withBillingCycleID(id))
	return &BillingCycleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillingCycle.
func (c *BillingCycleClient) Delete() *BillingCycleDelete {
	mutation := newBillingCycleMutation(c.config, OpDelete)
	return &BillingCycleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BillingCycleClient) DeleteOne(bc *BillingCycle) *BillingCycleDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BillingCycleClient) DeleteOneID(id int) *BillingCycleDeleteOne {
	builder := c.Delete().Where(billingcycle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillingCycleDeleteOne{builder}
}

// Query returns a query builder for BillingCycle.
func (c *BillingCycleClient) Query() *BillingCycleQuery {
	return &BillingCycleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBillingCycle},
		inters: c.Interceptors(),
	}
}

// Get returns a BillingCycle entity by its id.
func (c *BillingCycleClient) Get(ctx context.Context, id int) (*BillingCycle, error) {
	return c.Query().Where(billingcycle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillingCycleClient) GetX(ctx context.Context, id int) *BillingCycle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BillingCycleClient) Hooks() []Hook {
	return c.hooks.BillingCycle
}

// Interceptors returns the client interceptors.
func (c *BillingCycleClient) Interceptors() []Interceptor {
	return c.inters.BillingCycle
}

func (c *BillingCycleClient) mutate(ctx context.Context, m *BillingCycleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BillingCycleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BillingCycleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BillingCycleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BillingCycleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BillingCycle mutation op: %q", m.Op())
	}
}

// OperationsClient is a client for the Operations schema.
type OperationsClient struct {
	config
}

// NewOperationsClient returns a client for the Operations from the given config.
func NewOperationsClient(c config) *OperationsClient {
	return &OperationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operations.Hooks(f(g(h())))`.
func (c *OperationsClient) Use(hooks ...Hook) {
	c.hooks.Operations = append(c.hooks.Operations, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `operations.Intercept(f(g(h())))`.
func (c *OperationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Operations = append(c.inters.Operations, interceptors...)
}

// Create returns a builder for creating a Operations entity.
func (c *OperationsClient) Create() *OperationsCreate {
	mutation := newOperationsMutation(c.config, OpCreate)
	return &OperationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Operations entities.
func (c *OperationsClient) CreateBulk(builders ...*OperationsCreate) *OperationsCreateBulk {
	return &OperationsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OperationsClient) MapCreateBulk(slice any, setFunc func(*OperationsCreate, int)) *OperationsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OperationsCreateBulk{err: fmt.Errorf("calling to OperationsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OperationsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OperationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Operations.
func (c *OperationsClient) Update() *OperationsUpdate {
	mutation := newOperationsMutation(c.config, OpUpdate)
	return &OperationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperationsClient) UpdateOne(o *Operations) *OperationsUpdateOne {
	mutation := newOperationsMutation(c.config, OpUpdateOne, withOperations(o))
	return &OperationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperationsClient) UpdateOneID(id int) *OperationsUpdateOne {
	mutation := newOperationsMutation(c.config, OpUpdateOne, withOperationsID(id))
	return &OperationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Operations.
func (c *OperationsClient) Delete() *OperationsDelete {
	mutation := newOperationsMutation(c.config, OpDelete)
	return &OperationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OperationsClient) DeleteOne(o *Operations) *OperationsDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OperationsClient) DeleteOneID(id int) *OperationsDeleteOne {
	builder := c.Delete().Where(operations.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperationsDeleteOne{builder}
}

// Query returns a query builder for Operations.
func (c *OperationsClient) Query() *OperationsQuery {
	return &OperationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOperations},
		inters: c.Interceptors(),
	}
}

// Get returns a Operations entity by its id.
func (c *OperationsClient) Get(ctx context.Context, id int) (*Operations, error) {
	return c.Query().Where(operations.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperationsClient) GetX(ctx context.Context, id int) *Operations {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Operations.
func (c *OperationsClient) QueryUser(o *Operations) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operations.Table, operations.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, operations.UserTable, operations.UserColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingCycle queries the billing_cycle edge of a Operations.
func (c *OperationsClient) QueryBillingCycle(o *Operations) *BillingCycleQuery {
	query := (&BillingCycleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operations.Table, operations.FieldID, id),
			sqlgraph.To(billingcycle.Table, billingcycle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, operations.BillingCycleTable, operations.BillingCycleColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a Operations.
func (c *OperationsClient) QueryTask(o *Operations) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operations.Table, operations.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, operations.TaskTable, operations.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OperationsClient) Hooks() []Hook {
	return c.hooks.Operations
}

// Interceptors returns the client interceptors.
func (c *OperationsClient) Interceptors() []Interceptor {
	return c.inters.Operations
}

func (c *OperationsClient) mutate(ctx context.Context, m *OperationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OperationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OperationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OperationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OperationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Operations mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskClient) MapCreateBulk(slice any, setFunc func(*TaskCreate, int)) *TaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskCreateBulk{err: fmt.Errorf("calling to TaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id int) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id int) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id int) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id int) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Task.
func (c *TaskClient) QueryUser(t *Task) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, task.UserTable, task.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// TaskLogClient is a client for the TaskLog schema.
type TaskLogClient struct {
	config
}

// NewTaskLogClient returns a client for the TaskLog from the given config.
func NewTaskLogClient(c config) *TaskLogClient {
	return &TaskLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tasklog.Hooks(f(g(h())))`.
func (c *TaskLogClient) Use(hooks ...Hook) {
	c.hooks.TaskLog = append(c.hooks.TaskLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tasklog.Intercept(f(g(h())))`.
func (c *TaskLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.TaskLog = append(c.inters.TaskLog, interceptors...)
}

// Create returns a builder for creating a TaskLog entity.
func (c *TaskLogClient) Create() *TaskLogCreate {
	mutation := newTaskLogMutation(c.config, OpCreate)
	return &TaskLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskLog entities.
func (c *TaskLogClient) CreateBulk(builders ...*TaskLogCreate) *TaskLogCreateBulk {
	return &TaskLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskLogClient) MapCreateBulk(slice any, setFunc func(*TaskLogCreate, int)) *TaskLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskLogCreateBulk{err: fmt.Errorf("calling to TaskLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskLog.
func (c *TaskLogClient) Update() *TaskLogUpdate {
	mutation := newTaskLogMutation(c.config, OpUpdate)
	return &TaskLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskLogClient) UpdateOne(tl *TaskLog) *TaskLogUpdateOne {
	mutation := newTaskLogMutation(c.config, OpUpdateOne, withTaskLog(tl))
	return &TaskLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskLogClient) UpdateOneID(id int) *TaskLogUpdateOne {
	mutation := newTaskLogMutation(c.config, OpUpdateOne, withTaskLogID(id))
	return &TaskLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskLog.
func (c *TaskLogClient) Delete() *TaskLogDelete {
	mutation := newTaskLogMutation(c.config, OpDelete)
	return &TaskLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskLogClient) DeleteOne(tl *TaskLog) *TaskLogDeleteOne {
	return c.DeleteOneID(tl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskLogClient) DeleteOneID(id int) *TaskLogDeleteOne {
	builder := c.Delete().Where(tasklog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskLogDeleteOne{builder}
}

// Query returns a query builder for TaskLog.
func (c *TaskLogClient) Query() *TaskLogQuery {
	return &TaskLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTaskLog},
		inters: c.Interceptors(),
	}
}

// Get returns a TaskLog entity by its id.
func (c *TaskLogClient) Get(ctx context.Context, id int) (*TaskLog, error) {
	return c.Query().Where(tasklog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskLogClient) GetX(ctx context.Context, id int) *TaskLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskLogClient) Hooks() []Hook {
	return c.hooks.TaskLog
}

// Interceptors returns the client interceptors.
func (c *TaskLogClient) Interceptors() []Interceptor {
	return c.inters.TaskLog
}

func (c *TaskLogClient) mutate(ctx context.Context, m *TaskLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TaskLog mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserLogClient is a client for the UserLog schema.
type UserLogClient struct {
	config
}

// NewUserLogClient returns a client for the UserLog from the given config.
func NewUserLogClient(c config) *UserLogClient {
	return &UserLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userlog.Hooks(f(g(h())))`.
func (c *UserLogClient) Use(hooks ...Hook) {
	c.hooks.UserLog = append(c.hooks.UserLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userlog.Intercept(f(g(h())))`.
func (c *UserLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserLog = append(c.inters.UserLog, interceptors...)
}

// Create returns a builder for creating a UserLog entity.
func (c *UserLogClient) Create() *UserLogCreate {
	mutation := newUserLogMutation(c.config, OpCreate)
	return &UserLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLog entities.
func (c *UserLogClient) CreateBulk(builders ...*UserLogCreate) *UserLogCreateBulk {
	return &UserLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserLogClient) MapCreateBulk(slice any, setFunc func(*UserLogCreate, int)) *UserLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserLogCreateBulk{err: fmt.Errorf("calling to UserLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLog.
func (c *UserLogClient) Update() *UserLogUpdate {
	mutation := newUserLogMutation(c.config, OpUpdate)
	return &UserLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLogClient) UpdateOne(ul *UserLog) *UserLogUpdateOne {
	mutation := newUserLogMutation(c.config, OpUpdateOne, withUserLog(ul))
	return &UserLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLogClient) UpdateOneID(id int) *UserLogUpdateOne {
	mutation := newUserLogMutation(c.config, OpUpdateOne, withUserLogID(id))
	return &UserLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLog.
func (c *UserLogClient) Delete() *UserLogDelete {
	mutation := newUserLogMutation(c.config, OpDelete)
	return &UserLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserLogClient) DeleteOne(ul *UserLog) *UserLogDeleteOne {
	return c.DeleteOneID(ul.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserLogClient) DeleteOneID(id int) *UserLogDeleteOne {
	builder := c.Delete().Where(userlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLogDeleteOne{builder}
}

// Query returns a query builder for UserLog.
func (c *UserLogClient) Query() *UserLogQuery {
	return &UserLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserLog},
		inters: c.Interceptors(),
	}
}

// Get returns a UserLog entity by its id.
func (c *UserLogClient) Get(ctx context.Context, id int) (*UserLog, error) {
	return c.Query().Where(userlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLogClient) GetX(ctx context.Context, id int) *UserLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserLogClient) Hooks() []Hook {
	return c.hooks.UserLog
}

// Interceptors returns the client interceptors.
func (c *UserLogClient) Interceptors() []Interceptor {
	return c.inters.UserLog
}

func (c *UserLogClient) mutate(ctx context.Context, m *UserLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserLog mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Billing, BillingCycle, Operations, Task, TaskLog, User, UserLog []ent.Hook
	}
	inters struct {
		Billing, BillingCycle, Operations, Task, TaskLog, User,
		UserLog []ent.Interceptor
	}
)
