// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lrmnt/AA6_homework/billing/ent/billing"
	"github.com/lrmnt/AA6_homework/billing/ent/billingcycle"
	"github.com/lrmnt/AA6_homework/billing/ent/predicate"
	"github.com/lrmnt/AA6_homework/billing/ent/user"
)

// BillingUpdate is the builder for updating Billing entities.
type BillingUpdate struct {
	config
	hooks    []Hook
	mutation *BillingMutation
}

// Where appends a list predicates to the BillingUpdate builder.
func (bu *BillingUpdate) Where(ps ...predicate.Billing) *BillingUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUUID sets the "uuid" field.
func (bu *BillingUpdate) SetUUID(u uuid.UUID) *BillingUpdate {
	bu.mutation.SetUUID(u)
	return bu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (bu *BillingUpdate) SetNillableUUID(u *uuid.UUID) *BillingUpdate {
	if u != nil {
		bu.SetUUID(*u)
	}
	return bu
}

// SetAmount sets the "amount" field.
func (bu *BillingUpdate) SetAmount(i int64) *BillingUpdate {
	bu.mutation.ResetAmount()
	bu.mutation.SetAmount(i)
	return bu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bu *BillingUpdate) SetNillableAmount(i *int64) *BillingUpdate {
	if i != nil {
		bu.SetAmount(*i)
	}
	return bu
}

// AddAmount adds i to the "amount" field.
func (bu *BillingUpdate) AddAmount(i int64) *BillingUpdate {
	bu.mutation.AddAmount(i)
	return bu
}

// SetTimestamp sets the "timestamp" field.
func (bu *BillingUpdate) SetTimestamp(i int64) *BillingUpdate {
	bu.mutation.ResetTimestamp()
	bu.mutation.SetTimestamp(i)
	return bu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (bu *BillingUpdate) SetNillableTimestamp(i *int64) *BillingUpdate {
	if i != nil {
		bu.SetTimestamp(*i)
	}
	return bu
}

// AddTimestamp adds i to the "timestamp" field.
func (bu *BillingUpdate) AddTimestamp(i int64) *BillingUpdate {
	bu.mutation.AddTimestamp(i)
	return bu
}

// SetType sets the "type" field.
func (bu *BillingUpdate) SetType(b billing.Type) *BillingUpdate {
	bu.mutation.SetType(b)
	return bu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bu *BillingUpdate) SetNillableType(b *billing.Type) *BillingUpdate {
	if b != nil {
		bu.SetType(*b)
	}
	return bu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bu *BillingUpdate) SetUserID(id int) *BillingUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BillingUpdate) SetUser(u *User) *BillingUpdate {
	return bu.SetUserID(u.ID)
}

// SetBillingCycleID sets the "billing_cycle" edge to the BillingCycle entity by ID.
func (bu *BillingUpdate) SetBillingCycleID(id int) *BillingUpdate {
	bu.mutation.SetBillingCycleID(id)
	return bu
}

// SetBillingCycle sets the "billing_cycle" edge to the BillingCycle entity.
func (bu *BillingUpdate) SetBillingCycle(b *BillingCycle) *BillingUpdate {
	return bu.SetBillingCycleID(b.ID)
}

// Mutation returns the BillingMutation object of the builder.
func (bu *BillingUpdate) Mutation() *BillingMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BillingUpdate) ClearUser() *BillingUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearBillingCycle clears the "billing_cycle" edge to the BillingCycle entity.
func (bu *BillingUpdate) ClearBillingCycle() *BillingUpdate {
	bu.mutation.ClearBillingCycle()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BillingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillingUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillingUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillingUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BillingUpdate) check() error {
	if v, ok := bu.mutation.GetType(); ok {
		if err := billing.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Billing.type": %w`, err)}
		}
	}
	if _, ok := bu.mutation.UserID(); bu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Billing.user"`)
	}
	if _, ok := bu.mutation.BillingCycleID(); bu.mutation.BillingCycleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Billing.billing_cycle"`)
	}
	return nil
}

func (bu *BillingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billing.Table, billing.Columns, sqlgraph.NewFieldSpec(billing.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UUID(); ok {
		_spec.SetField(billing.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := bu.mutation.Amount(); ok {
		_spec.SetField(billing.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedAmount(); ok {
		_spec.AddField(billing.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.Timestamp(); ok {
		_spec.SetField(billing.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedTimestamp(); ok {
		_spec.AddField(billing.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.SetField(billing.FieldType, field.TypeEnum, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.UserTable,
			Columns: []string{billing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.UserTable,
			Columns: []string{billing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BillingCycleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.BillingCycleTable,
			Columns: []string{billing.BillingCycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BillingCycleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.BillingCycleTable,
			Columns: []string{billing.BillingCycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BillingUpdateOne is the builder for updating a single Billing entity.
type BillingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingMutation
}

// SetUUID sets the "uuid" field.
func (buo *BillingUpdateOne) SetUUID(u uuid.UUID) *BillingUpdateOne {
	buo.mutation.SetUUID(u)
	return buo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableUUID(u *uuid.UUID) *BillingUpdateOne {
	if u != nil {
		buo.SetUUID(*u)
	}
	return buo
}

// SetAmount sets the "amount" field.
func (buo *BillingUpdateOne) SetAmount(i int64) *BillingUpdateOne {
	buo.mutation.ResetAmount()
	buo.mutation.SetAmount(i)
	return buo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableAmount(i *int64) *BillingUpdateOne {
	if i != nil {
		buo.SetAmount(*i)
	}
	return buo
}

// AddAmount adds i to the "amount" field.
func (buo *BillingUpdateOne) AddAmount(i int64) *BillingUpdateOne {
	buo.mutation.AddAmount(i)
	return buo
}

// SetTimestamp sets the "timestamp" field.
func (buo *BillingUpdateOne) SetTimestamp(i int64) *BillingUpdateOne {
	buo.mutation.ResetTimestamp()
	buo.mutation.SetTimestamp(i)
	return buo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableTimestamp(i *int64) *BillingUpdateOne {
	if i != nil {
		buo.SetTimestamp(*i)
	}
	return buo
}

// AddTimestamp adds i to the "timestamp" field.
func (buo *BillingUpdateOne) AddTimestamp(i int64) *BillingUpdateOne {
	buo.mutation.AddTimestamp(i)
	return buo
}

// SetType sets the "type" field.
func (buo *BillingUpdateOne) SetType(b billing.Type) *BillingUpdateOne {
	buo.mutation.SetType(b)
	return buo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableType(b *billing.Type) *BillingUpdateOne {
	if b != nil {
		buo.SetType(*b)
	}
	return buo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buo *BillingUpdateOne) SetUserID(id int) *BillingUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BillingUpdateOne) SetUser(u *User) *BillingUpdateOne {
	return buo.SetUserID(u.ID)
}

// SetBillingCycleID sets the "billing_cycle" edge to the BillingCycle entity by ID.
func (buo *BillingUpdateOne) SetBillingCycleID(id int) *BillingUpdateOne {
	buo.mutation.SetBillingCycleID(id)
	return buo
}

// SetBillingCycle sets the "billing_cycle" edge to the BillingCycle entity.
func (buo *BillingUpdateOne) SetBillingCycle(b *BillingCycle) *BillingUpdateOne {
	return buo.SetBillingCycleID(b.ID)
}

// Mutation returns the BillingMutation object of the builder.
func (buo *BillingUpdateOne) Mutation() *BillingMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BillingUpdateOne) ClearUser() *BillingUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearBillingCycle clears the "billing_cycle" edge to the BillingCycle entity.
func (buo *BillingUpdateOne) ClearBillingCycle() *BillingUpdateOne {
	buo.mutation.ClearBillingCycle()
	return buo
}

// Where appends a list predicates to the BillingUpdate builder.
func (buo *BillingUpdateOne) Where(ps ...predicate.Billing) *BillingUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BillingUpdateOne) Select(field string, fields ...string) *BillingUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Billing entity.
func (buo *BillingUpdateOne) Save(ctx context.Context) (*Billing, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillingUpdateOne) SaveX(ctx context.Context) *Billing {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BillingUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillingUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BillingUpdateOne) check() error {
	if v, ok := buo.mutation.GetType(); ok {
		if err := billing.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Billing.type": %w`, err)}
		}
	}
	if _, ok := buo.mutation.UserID(); buo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Billing.user"`)
	}
	if _, ok := buo.mutation.BillingCycleID(); buo.mutation.BillingCycleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Billing.billing_cycle"`)
	}
	return nil
}

func (buo *BillingUpdateOne) sqlSave(ctx context.Context) (_node *Billing, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billing.Table, billing.Columns, sqlgraph.NewFieldSpec(billing.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Billing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billing.FieldID)
		for _, f := range fields {
			if !billing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UUID(); ok {
		_spec.SetField(billing.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := buo.mutation.Amount(); ok {
		_spec.SetField(billing.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedAmount(); ok {
		_spec.AddField(billing.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.Timestamp(); ok {
		_spec.SetField(billing.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedTimestamp(); ok {
		_spec.AddField(billing.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.SetField(billing.FieldType, field.TypeEnum, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.UserTable,
			Columns: []string{billing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.UserTable,
			Columns: []string{billing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BillingCycleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.BillingCycleTable,
			Columns: []string{billing.BillingCycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BillingCycleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.BillingCycleTable,
			Columns: []string{billing.BillingCycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Billing{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
