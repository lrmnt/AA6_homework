// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lrmnt/AA6_homework/billing/ent/billing"
	"github.com/lrmnt/AA6_homework/billing/ent/billingcycle"
	"github.com/lrmnt/AA6_homework/billing/ent/user"
)

// Billing is the model entity for the Billing schema.
type Billing struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int64 `json:"amount,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp int64 `json:"timestamp,omitempty"`
	// Type holds the value of the "type" field.
	Type billing.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingQuery when eager-loading is set.
	Edges                 BillingEdges `json:"edges"`
	billing_user          *int
	billing_billing_cycle *int
	selectValues          sql.SelectValues
}

// BillingEdges holds the relations/edges for other nodes in the graph.
type BillingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// BillingCycle holds the value of the billing_cycle edge.
	BillingCycle *BillingCycle `json:"billing_cycle,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BillingCycleOrErr returns the BillingCycle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingEdges) BillingCycleOrErr() (*BillingCycle, error) {
	if e.BillingCycle != nil {
		return e.BillingCycle, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: billingcycle.Label}
	}
	return nil, &NotLoadedError{edge: "billing_cycle"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Billing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billing.FieldID, billing.FieldAmount, billing.FieldTimestamp:
			values[i] = new(sql.NullInt64)
		case billing.FieldType:
			values[i] = new(sql.NullString)
		case billing.FieldUUID:
			values[i] = new(uuid.UUID)
		case billing.ForeignKeys[0]: // billing_user
			values[i] = new(sql.NullInt64)
		case billing.ForeignKeys[1]: // billing_billing_cycle
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Billing fields.
func (b *Billing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billing.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case billing.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				b.UUID = *value
			}
		case billing.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				b.Amount = value.Int64
			}
		case billing.FieldTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				b.Timestamp = value.Int64
			}
		case billing.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				b.Type = billing.Type(value.String)
			}
		case billing.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field billing_user", value)
			} else if value.Valid {
				b.billing_user = new(int)
				*b.billing_user = int(value.Int64)
			}
		case billing.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field billing_billing_cycle", value)
			} else if value.Valid {
				b.billing_billing_cycle = new(int)
				*b.billing_billing_cycle = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Billing.
// This includes values selected through modifiers, order, etc.
func (b *Billing) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Billing entity.
func (b *Billing) QueryUser() *UserQuery {
	return NewBillingClient(b.config).QueryUser(b)
}

// QueryBillingCycle queries the "billing_cycle" edge of the Billing entity.
func (b *Billing) QueryBillingCycle() *BillingCycleQuery {
	return NewBillingClient(b.config).QueryBillingCycle(b)
}

// Update returns a builder for updating this Billing.
// Note that you need to call Billing.Unwrap() before calling this method if this Billing
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Billing) Update() *BillingUpdateOne {
	return NewBillingClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Billing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Billing) Unwrap() *Billing {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Billing is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Billing) String() string {
	var builder strings.Builder
	builder.WriteString("Billing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", b.UUID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", b.Amount))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(fmt.Sprintf("%v", b.Timestamp))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", b.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Billings is a parsable slice of Billing.
type Billings []*Billing
