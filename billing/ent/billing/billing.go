// Code generated by ent, DO NOT EDIT.

package billing

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the billing type in the database.
	Label = "billing"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeBillingCycle holds the string denoting the billing_cycle edge name in mutations.
	EdgeBillingCycle = "billing_cycle"
	// Table holds the table name of the billing in the database.
	Table = "billings"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "billings"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "billing_user"
	// BillingCycleTable is the table that holds the billing_cycle relation/edge.
	BillingCycleTable = "billings"
	// BillingCycleInverseTable is the table name for the BillingCycle entity.
	// It exists in this package in order to avoid circular dependency with the "billingcycle" package.
	BillingCycleInverseTable = "billing_cycles"
	// BillingCycleColumn is the table column denoting the billing_cycle relation/edge.
	BillingCycleColumn = "billing_billing_cycle"
)

// Columns holds all SQL columns for billing fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldAmount,
	FieldTimestamp,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "billings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"billing_user",
	"billing_billing_cycle",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePayout   Type = "payout"
	TypeDebtMove Type = "debt_move"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePayout, TypeDebtMove:
		return nil
	default:
		return fmt.Errorf("billing: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Billing queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillingCycleField orders the results by billing_cycle field.
func ByBillingCycleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillingCycleStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newBillingCycleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillingCycleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BillingCycleTable, BillingCycleColumn),
	)
}
