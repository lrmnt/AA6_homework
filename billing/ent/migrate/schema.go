// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BillingsColumns holds the columns for the "billings" table.
	BillingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "amount", Type: field.TypeInt64},
		{Name: "timestamp", Type: field.TypeInt64},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"payout", "debt_move"}},
		{Name: "billing_user", Type: field.TypeInt},
		{Name: "billing_billing_cycle", Type: field.TypeInt},
	}
	// BillingsTable holds the schema information for the "billings" table.
	BillingsTable = &schema.Table{
		Name:       "billings",
		Columns:    BillingsColumns,
		PrimaryKey: []*schema.Column{BillingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "billings_users_user",
				Columns:    []*schema.Column{BillingsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "billings_billing_cycles_billing_cycle",
				Columns:    []*schema.Column{BillingsColumns[6]},
				RefColumns: []*schema.Column{BillingCyclesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BillingCyclesColumns holds the columns for the "billing_cycles" table.
	BillingCyclesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "ts_from", Type: field.TypeInt64},
		{Name: "ts_to", Type: field.TypeInt64},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"open", "closed", "future"}},
	}
	// BillingCyclesTable holds the schema information for the "billing_cycles" table.
	BillingCyclesTable = &schema.Table{
		Name:       "billing_cycles",
		Columns:    BillingCyclesColumns,
		PrimaryKey: []*schema.Column{BillingCyclesColumns[0]},
	}
	// OperationsColumns holds the columns for the "operations" table.
	OperationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "amount", Type: field.TypeInt64},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"income", "outcome"}},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "operations_user", Type: field.TypeInt},
		{Name: "operations_billing_cycle", Type: field.TypeInt},
		{Name: "operations_task", Type: field.TypeInt},
	}
	// OperationsTable holds the schema information for the "operations" table.
	OperationsTable = &schema.Table{
		Name:       "operations",
		Columns:    OperationsColumns,
		PrimaryKey: []*schema.Column{OperationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "operations_users_user",
				Columns:    []*schema.Column{OperationsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "operations_billing_cycles_billing_cycle",
				Columns:    []*schema.Column{OperationsColumns[6]},
				RefColumns: []*schema.Column{BillingCyclesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "operations_tasks_task",
				Columns:    []*schema.Column{OperationsColumns[7]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "cost", Type: field.TypeInt64},
		{Name: "jira_id", Type: field.TypeString},
		{Name: "task_user", Type: field.TypeInt},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_users_user",
				Columns:    []*schema.Column{TasksColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TaskLogsColumns holds the columns for the "task_logs" table.
	TaskLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "idempotency_key", Type: field.TypeString, Unique: true},
	}
	// TaskLogsTable holds the schema information for the "task_logs" table.
	TaskLogsTable = &schema.Table{
		Name:       "task_logs",
		Columns:    TaskLogsColumns,
		PrimaryKey: []*schema.Column{TaskLogsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "role", Type: field.TypeString},
		{Name: "balance", Type: field.TypeInt64, Default: 0},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserLogsColumns holds the columns for the "user_logs" table.
	UserLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "idempotency_key", Type: field.TypeString, Unique: true},
	}
	// UserLogsTable holds the schema information for the "user_logs" table.
	UserLogsTable = &schema.Table{
		Name:       "user_logs",
		Columns:    UserLogsColumns,
		PrimaryKey: []*schema.Column{UserLogsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BillingsTable,
		BillingCyclesTable,
		OperationsTable,
		TasksTable,
		TaskLogsTable,
		UsersTable,
		UserLogsTable,
	}
)

func init() {
	BillingsTable.ForeignKeys[0].RefTable = UsersTable
	BillingsTable.ForeignKeys[1].RefTable = BillingCyclesTable
	OperationsTable.ForeignKeys[0].RefTable = UsersTable
	OperationsTable.ForeignKeys[1].RefTable = BillingCyclesTable
	OperationsTable.ForeignKeys[2].RefTable = TasksTable
	TasksTable.ForeignKeys[0].RefTable = UsersTable
}
