// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lrmnt/AA6_homework/billing/ent/billingcycle"
)

// BillingCycle is the model entity for the BillingCycle schema.
type BillingCycle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// TsFrom holds the value of the "ts_from" field.
	TsFrom int64 `json:"ts_from,omitempty"`
	// TsTo holds the value of the "ts_to" field.
	TsTo int64 `json:"ts_to,omitempty"`
	// State holds the value of the "state" field.
	State        billingcycle.State `json:"state,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingCycle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingcycle.FieldID, billingcycle.FieldTsFrom, billingcycle.FieldTsTo:
			values[i] = new(sql.NullInt64)
		case billingcycle.FieldState:
			values[i] = new(sql.NullString)
		case billingcycle.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingCycle fields.
func (bc *BillingCycle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingcycle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bc.ID = int(value.Int64)
		case billingcycle.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				bc.UUID = *value
			}
		case billingcycle.FieldTsFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ts_from", values[i])
			} else if value.Valid {
				bc.TsFrom = value.Int64
			}
		case billingcycle.FieldTsTo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ts_to", values[i])
			} else if value.Valid {
				bc.TsTo = value.Int64
			}
		case billingcycle.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				bc.State = billingcycle.State(value.String)
			}
		default:
			bc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingCycle.
// This includes values selected through modifiers, order, etc.
func (bc *BillingCycle) Value(name string) (ent.Value, error) {
	return bc.selectValues.Get(name)
}

// Update returns a builder for updating this BillingCycle.
// Note that you need to call BillingCycle.Unwrap() before calling this method if this BillingCycle
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BillingCycle) Update() *BillingCycleUpdateOne {
	return NewBillingCycleClient(bc.config).UpdateOne(bc)
}

// Unwrap unwraps the BillingCycle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BillingCycle) Unwrap() *BillingCycle {
	_tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BillingCycle is not a transactional entity")
	}
	bc.config.driver = _tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BillingCycle) String() string {
	var builder strings.Builder
	builder.WriteString("BillingCycle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bc.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", bc.UUID))
	builder.WriteString(", ")
	builder.WriteString("ts_from=")
	builder.WriteString(fmt.Sprintf("%v", bc.TsFrom))
	builder.WriteString(", ")
	builder.WriteString("ts_to=")
	builder.WriteString(fmt.Sprintf("%v", bc.TsTo))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", bc.State))
	builder.WriteByte(')')
	return builder.String()
}

// BillingCycles is a parsable slice of BillingCycle.
type BillingCycles []*BillingCycle
