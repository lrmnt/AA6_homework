// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lrmnt/AA6_homework/billing/ent/billingcycle"
)

// BillingCycleCreate is the builder for creating a BillingCycle entity.
type BillingCycleCreate struct {
	config
	mutation *BillingCycleMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (bcc *BillingCycleCreate) SetUUID(u uuid.UUID) *BillingCycleCreate {
	bcc.mutation.SetUUID(u)
	return bcc
}

// SetTsFrom sets the "ts_from" field.
func (bcc *BillingCycleCreate) SetTsFrom(i int64) *BillingCycleCreate {
	bcc.mutation.SetTsFrom(i)
	return bcc
}

// SetTsTo sets the "ts_to" field.
func (bcc *BillingCycleCreate) SetTsTo(i int64) *BillingCycleCreate {
	bcc.mutation.SetTsTo(i)
	return bcc
}

// SetState sets the "state" field.
func (bcc *BillingCycleCreate) SetState(b billingcycle.State) *BillingCycleCreate {
	bcc.mutation.SetState(b)
	return bcc
}

// Mutation returns the BillingCycleMutation object of the builder.
func (bcc *BillingCycleCreate) Mutation() *BillingCycleMutation {
	return bcc.mutation
}

// Save creates the BillingCycle in the database.
func (bcc *BillingCycleCreate) Save(ctx context.Context) (*BillingCycle, error) {
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BillingCycleCreate) SaveX(ctx context.Context) *BillingCycle {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BillingCycleCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BillingCycleCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BillingCycleCreate) check() error {
	if _, ok := bcc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "BillingCycle.uuid"`)}
	}
	if _, ok := bcc.mutation.TsFrom(); !ok {
		return &ValidationError{Name: "ts_from", err: errors.New(`ent: missing required field "BillingCycle.ts_from"`)}
	}
	if _, ok := bcc.mutation.TsTo(); !ok {
		return &ValidationError{Name: "ts_to", err: errors.New(`ent: missing required field "BillingCycle.ts_to"`)}
	}
	if _, ok := bcc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "BillingCycle.state"`)}
	}
	if v, ok := bcc.mutation.State(); ok {
		if err := billingcycle.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "BillingCycle.state": %w`, err)}
		}
	}
	return nil
}

func (bcc *BillingCycleCreate) sqlSave(ctx context.Context) (*BillingCycle, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BillingCycleCreate) createSpec() (*BillingCycle, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingCycle{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(billingcycle.Table, sqlgraph.NewFieldSpec(billingcycle.FieldID, field.TypeInt))
	)
	if value, ok := bcc.mutation.UUID(); ok {
		_spec.SetField(billingcycle.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := bcc.mutation.TsFrom(); ok {
		_spec.SetField(billingcycle.FieldTsFrom, field.TypeInt64, value)
		_node.TsFrom = value
	}
	if value, ok := bcc.mutation.TsTo(); ok {
		_spec.SetField(billingcycle.FieldTsTo, field.TypeInt64, value)
		_node.TsTo = value
	}
	if value, ok := bcc.mutation.State(); ok {
		_spec.SetField(billingcycle.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	return _node, _spec
}

// BillingCycleCreateBulk is the builder for creating many BillingCycle entities in bulk.
type BillingCycleCreateBulk struct {
	config
	err      error
	builders []*BillingCycleCreate
}

// Save creates the BillingCycle entities in the database.
func (bccb *BillingCycleCreateBulk) Save(ctx context.Context) ([]*BillingCycle, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BillingCycle, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingCycleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BillingCycleCreateBulk) SaveX(ctx context.Context) []*BillingCycle {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BillingCycleCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BillingCycleCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}
