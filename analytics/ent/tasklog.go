// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lrmnt/AA6_homework/analytics/ent/tasklog"
)

// TaskLog is the model entity for the TaskLog schema.
type TaskLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IdempotencyKey holds the value of the "idempotency_key" field.
	IdempotencyKey string `json:"idempotency_key,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tasklog.FieldID:
			values[i] = new(sql.NullInt64)
		case tasklog.FieldIdempotencyKey:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskLog fields.
func (tl *TaskLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tasklog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = int(value.Int64)
		case tasklog.FieldIdempotencyKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idempotency_key", values[i])
			} else if value.Valid {
				tl.IdempotencyKey = value.String
			}
		default:
			tl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskLog.
// This includes values selected through modifiers, order, etc.
func (tl *TaskLog) Value(name string) (ent.Value, error) {
	return tl.selectValues.Get(name)
}

// Update returns a builder for updating this TaskLog.
// Note that you need to call TaskLog.Unwrap() before calling this method if this TaskLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TaskLog) Update() *TaskLogUpdateOne {
	return NewTaskLogClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TaskLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TaskLog) Unwrap() *TaskLog {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskLog is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TaskLog) String() string {
	var builder strings.Builder
	builder.WriteString("TaskLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("idempotency_key=")
	builder.WriteString(tl.IdempotencyKey)
	builder.WriteByte(')')
	return builder.String()
}

// TaskLogs is a parsable slice of TaskLog.
type TaskLogs []*TaskLog
