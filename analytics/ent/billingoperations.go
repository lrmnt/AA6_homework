// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lrmnt/AA6_homework/analytics/ent/billingoperations"
	"github.com/lrmnt/AA6_homework/analytics/ent/user"
)

// BillingOperations is the model entity for the BillingOperations schema.
type BillingOperations struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int64 `json:"amount,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp int64 `json:"timestamp,omitempty"`
	// Type holds the value of the "type" field.
	Type billingoperations.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillingOperationsQuery when eager-loading is set.
	Edges                   BillingOperationsEdges `json:"edges"`
	billing_operations_user *int
	selectValues            sql.SelectValues
}

// BillingOperationsEdges holds the relations/edges for other nodes in the graph.
type BillingOperationsEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillingOperationsEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingOperations) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billingoperations.FieldID, billingoperations.FieldAmount, billingoperations.FieldTimestamp:
			values[i] = new(sql.NullInt64)
		case billingoperations.FieldType:
			values[i] = new(sql.NullString)
		case billingoperations.FieldUUID:
			values[i] = new(uuid.UUID)
		case billingoperations.ForeignKeys[0]: // billing_operations_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingOperations fields.
func (bo *BillingOperations) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billingoperations.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bo.ID = int(value.Int64)
		case billingoperations.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				bo.UUID = *value
			}
		case billingoperations.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				bo.Amount = value.Int64
			}
		case billingoperations.FieldTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				bo.Timestamp = value.Int64
			}
		case billingoperations.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				bo.Type = billingoperations.Type(value.String)
			}
		case billingoperations.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field billing_operations_user", value)
			} else if value.Valid {
				bo.billing_operations_user = new(int)
				*bo.billing_operations_user = int(value.Int64)
			}
		default:
			bo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingOperations.
// This includes values selected through modifiers, order, etc.
func (bo *BillingOperations) Value(name string) (ent.Value, error) {
	return bo.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the BillingOperations entity.
func (bo *BillingOperations) QueryUser() *UserQuery {
	return NewBillingOperationsClient(bo.config).QueryUser(bo)
}

// Update returns a builder for updating this BillingOperations.
// Note that you need to call BillingOperations.Unwrap() before calling this method if this BillingOperations
// was returned from a transaction, and the transaction was committed or rolled back.
func (bo *BillingOperations) Update() *BillingOperationsUpdateOne {
	return NewBillingOperationsClient(bo.config).UpdateOne(bo)
}

// Unwrap unwraps the BillingOperations entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bo *BillingOperations) Unwrap() *BillingOperations {
	_tx, ok := bo.config.driver.(*txDriver)
	if !ok {
		panic("ent: BillingOperations is not a transactional entity")
	}
	bo.config.driver = _tx.drv
	return bo
}

// String implements the fmt.Stringer.
func (bo *BillingOperations) String() string {
	var builder strings.Builder
	builder.WriteString("BillingOperations(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bo.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", bo.UUID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", bo.Amount))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(fmt.Sprintf("%v", bo.Timestamp))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", bo.Type))
	builder.WriteByte(')')
	return builder.String()
}

// BillingOperationsSlice is a parsable slice of BillingOperations.
type BillingOperationsSlice []*BillingOperations
