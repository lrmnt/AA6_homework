// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lrmnt/AA6_homework/analytics/ent/billingoperations"
	"github.com/lrmnt/AA6_homework/analytics/ent/predicate"
	"github.com/lrmnt/AA6_homework/analytics/ent/user"
)

// BillingOperationsUpdate is the builder for updating BillingOperations entities.
type BillingOperationsUpdate struct {
	config
	hooks    []Hook
	mutation *BillingOperationsMutation
}

// Where appends a list predicates to the BillingOperationsUpdate builder.
func (bou *BillingOperationsUpdate) Where(ps ...predicate.BillingOperations) *BillingOperationsUpdate {
	bou.mutation.Where(ps...)
	return bou
}

// SetUUID sets the "uuid" field.
func (bou *BillingOperationsUpdate) SetUUID(u uuid.UUID) *BillingOperationsUpdate {
	bou.mutation.SetUUID(u)
	return bou
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (bou *BillingOperationsUpdate) SetNillableUUID(u *uuid.UUID) *BillingOperationsUpdate {
	if u != nil {
		bou.SetUUID(*u)
	}
	return bou
}

// SetAmount sets the "amount" field.
func (bou *BillingOperationsUpdate) SetAmount(i int64) *BillingOperationsUpdate {
	bou.mutation.ResetAmount()
	bou.mutation.SetAmount(i)
	return bou
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bou *BillingOperationsUpdate) SetNillableAmount(i *int64) *BillingOperationsUpdate {
	if i != nil {
		bou.SetAmount(*i)
	}
	return bou
}

// AddAmount adds i to the "amount" field.
func (bou *BillingOperationsUpdate) AddAmount(i int64) *BillingOperationsUpdate {
	bou.mutation.AddAmount(i)
	return bou
}

// SetTimestamp sets the "timestamp" field.
func (bou *BillingOperationsUpdate) SetTimestamp(i int64) *BillingOperationsUpdate {
	bou.mutation.ResetTimestamp()
	bou.mutation.SetTimestamp(i)
	return bou
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (bou *BillingOperationsUpdate) SetNillableTimestamp(i *int64) *BillingOperationsUpdate {
	if i != nil {
		bou.SetTimestamp(*i)
	}
	return bou
}

// AddTimestamp adds i to the "timestamp" field.
func (bou *BillingOperationsUpdate) AddTimestamp(i int64) *BillingOperationsUpdate {
	bou.mutation.AddTimestamp(i)
	return bou
}

// SetType sets the "type" field.
func (bou *BillingOperationsUpdate) SetType(b billingoperations.Type) *BillingOperationsUpdate {
	bou.mutation.SetType(b)
	return bou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bou *BillingOperationsUpdate) SetNillableType(b *billingoperations.Type) *BillingOperationsUpdate {
	if b != nil {
		bou.SetType(*b)
	}
	return bou
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bou *BillingOperationsUpdate) SetUserID(id int) *BillingOperationsUpdate {
	bou.mutation.SetUserID(id)
	return bou
}

// SetUser sets the "user" edge to the User entity.
func (bou *BillingOperationsUpdate) SetUser(u *User) *BillingOperationsUpdate {
	return bou.SetUserID(u.ID)
}

// Mutation returns the BillingOperationsMutation object of the builder.
func (bou *BillingOperationsUpdate) Mutation() *BillingOperationsMutation {
	return bou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bou *BillingOperationsUpdate) ClearUser() *BillingOperationsUpdate {
	bou.mutation.ClearUser()
	return bou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bou *BillingOperationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bou.sqlSave, bou.mutation, bou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bou *BillingOperationsUpdate) SaveX(ctx context.Context) int {
	affected, err := bou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bou *BillingOperationsUpdate) Exec(ctx context.Context) error {
	_, err := bou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bou *BillingOperationsUpdate) ExecX(ctx context.Context) {
	if err := bou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bou *BillingOperationsUpdate) check() error {
	if v, ok := bou.mutation.GetType(); ok {
		if err := billingoperations.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "BillingOperations.type": %w`, err)}
		}
	}
	if _, ok := bou.mutation.UserID(); bou.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BillingOperations.user"`)
	}
	return nil
}

func (bou *BillingOperationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingoperations.Table, billingoperations.Columns, sqlgraph.NewFieldSpec(billingoperations.FieldID, field.TypeInt))
	if ps := bou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bou.mutation.UUID(); ok {
		_spec.SetField(billingoperations.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := bou.mutation.Amount(); ok {
		_spec.SetField(billingoperations.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := bou.mutation.AddedAmount(); ok {
		_spec.AddField(billingoperations.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := bou.mutation.Timestamp(); ok {
		_spec.SetField(billingoperations.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := bou.mutation.AddedTimestamp(); ok {
		_spec.AddField(billingoperations.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := bou.mutation.GetType(); ok {
		_spec.SetField(billingoperations.FieldType, field.TypeEnum, value)
	}
	if bou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingoperations.UserTable,
			Columns: []string{billingoperations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingoperations.UserTable,
			Columns: []string{billingoperations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingoperations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bou.mutation.done = true
	return n, nil
}

// BillingOperationsUpdateOne is the builder for updating a single BillingOperations entity.
type BillingOperationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingOperationsMutation
}

// SetUUID sets the "uuid" field.
func (bouo *BillingOperationsUpdateOne) SetUUID(u uuid.UUID) *BillingOperationsUpdateOne {
	bouo.mutation.SetUUID(u)
	return bouo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (bouo *BillingOperationsUpdateOne) SetNillableUUID(u *uuid.UUID) *BillingOperationsUpdateOne {
	if u != nil {
		bouo.SetUUID(*u)
	}
	return bouo
}

// SetAmount sets the "amount" field.
func (bouo *BillingOperationsUpdateOne) SetAmount(i int64) *BillingOperationsUpdateOne {
	bouo.mutation.ResetAmount()
	bouo.mutation.SetAmount(i)
	return bouo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bouo *BillingOperationsUpdateOne) SetNillableAmount(i *int64) *BillingOperationsUpdateOne {
	if i != nil {
		bouo.SetAmount(*i)
	}
	return bouo
}

// AddAmount adds i to the "amount" field.
func (bouo *BillingOperationsUpdateOne) AddAmount(i int64) *BillingOperationsUpdateOne {
	bouo.mutation.AddAmount(i)
	return bouo
}

// SetTimestamp sets the "timestamp" field.
func (bouo *BillingOperationsUpdateOne) SetTimestamp(i int64) *BillingOperationsUpdateOne {
	bouo.mutation.ResetTimestamp()
	bouo.mutation.SetTimestamp(i)
	return bouo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (bouo *BillingOperationsUpdateOne) SetNillableTimestamp(i *int64) *BillingOperationsUpdateOne {
	if i != nil {
		bouo.SetTimestamp(*i)
	}
	return bouo
}

// AddTimestamp adds i to the "timestamp" field.
func (bouo *BillingOperationsUpdateOne) AddTimestamp(i int64) *BillingOperationsUpdateOne {
	bouo.mutation.AddTimestamp(i)
	return bouo
}

// SetType sets the "type" field.
func (bouo *BillingOperationsUpdateOne) SetType(b billingoperations.Type) *BillingOperationsUpdateOne {
	bouo.mutation.SetType(b)
	return bouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bouo *BillingOperationsUpdateOne) SetNillableType(b *billingoperations.Type) *BillingOperationsUpdateOne {
	if b != nil {
		bouo.SetType(*b)
	}
	return bouo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bouo *BillingOperationsUpdateOne) SetUserID(id int) *BillingOperationsUpdateOne {
	bouo.mutation.SetUserID(id)
	return bouo
}

// SetUser sets the "user" edge to the User entity.
func (bouo *BillingOperationsUpdateOne) SetUser(u *User) *BillingOperationsUpdateOne {
	return bouo.SetUserID(u.ID)
}

// Mutation returns the BillingOperationsMutation object of the builder.
func (bouo *BillingOperationsUpdateOne) Mutation() *BillingOperationsMutation {
	return bouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bouo *BillingOperationsUpdateOne) ClearUser() *BillingOperationsUpdateOne {
	bouo.mutation.ClearUser()
	return bouo
}

// Where appends a list predicates to the BillingOperationsUpdate builder.
func (bouo *BillingOperationsUpdateOne) Where(ps ...predicate.BillingOperations) *BillingOperationsUpdateOne {
	bouo.mutation.Where(ps...)
	return bouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bouo *BillingOperationsUpdateOne) Select(field string, fields ...string) *BillingOperationsUpdateOne {
	bouo.fields = append([]string{field}, fields...)
	return bouo
}

// Save executes the query and returns the updated BillingOperations entity.
func (bouo *BillingOperationsUpdateOne) Save(ctx context.Context) (*BillingOperations, error) {
	return withHooks(ctx, bouo.sqlSave, bouo.mutation, bouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bouo *BillingOperationsUpdateOne) SaveX(ctx context.Context) *BillingOperations {
	node, err := bouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bouo *BillingOperationsUpdateOne) Exec(ctx context.Context) error {
	_, err := bouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bouo *BillingOperationsUpdateOne) ExecX(ctx context.Context) {
	if err := bouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bouo *BillingOperationsUpdateOne) check() error {
	if v, ok := bouo.mutation.GetType(); ok {
		if err := billingoperations.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "BillingOperations.type": %w`, err)}
		}
	}
	if _, ok := bouo.mutation.UserID(); bouo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BillingOperations.user"`)
	}
	return nil
}

func (bouo *BillingOperationsUpdateOne) sqlSave(ctx context.Context) (_node *BillingOperations, err error) {
	if err := bouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billingoperations.Table, billingoperations.Columns, sqlgraph.NewFieldSpec(billingoperations.FieldID, field.TypeInt))
	id, ok := bouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BillingOperations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingoperations.FieldID)
		for _, f := range fields {
			if !billingoperations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billingoperations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bouo.mutation.UUID(); ok {
		_spec.SetField(billingoperations.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := bouo.mutation.Amount(); ok {
		_spec.SetField(billingoperations.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := bouo.mutation.AddedAmount(); ok {
		_spec.AddField(billingoperations.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := bouo.mutation.Timestamp(); ok {
		_spec.SetField(billingoperations.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := bouo.mutation.AddedTimestamp(); ok {
		_spec.AddField(billingoperations.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := bouo.mutation.GetType(); ok {
		_spec.SetField(billingoperations.FieldType, field.TypeEnum, value)
	}
	if bouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingoperations.UserTable,
			Columns: []string{billingoperations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billingoperations.UserTable,
			Columns: []string{billingoperations.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillingOperations{config: bouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingoperations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bouo.mutation.done = true
	return _node, nil
}
